ifndef CONTIKI
  $(error CONTIKI not defined! You must specify where CONTIKI resides!)
endif
PLATFORM_DIR = $(CONTIKI)/platform/mulle

CPU_NAME = k60
CPU_DIR = $(CONTIKI)/cpu/arm/$(CPU_NAME)

export BAUD ?= 115200

# Default GDB port
export GDB_PORT ?= 3333

# Backwards compatibility with older environment settings (.profile, .bashrc etc.)
# MULLE_SERIAL was called MULLE_BOARD_SERIAL_NUMBER previously.
ifdef MULLE_BOARD_SERIAL_NUMBER
  ifeq ($(MULLE_SERIAL),)
    MULLE_SERIAL=$(MULLE_BOARD_SERIAL_NUMBER)
  endif
endif

# MULLE_SERIAL is used to select which specific Mulle board we are compiling for.
# This was called MULLE_BOARD_SERIAL_NUMBER previously, renamed because
# MULLE_BOARD_SERIAL_NUMBER is too long to type.
ifdef MULLE_SERIAL
  CFLAGS += -DMULLE_SERIAL=$(MULLE_SERIAL)
endif

# MULLE_SERIAL is used to select which specific Mulle board we are compiling for.
# This was called MULLE_BOARD_SERIAL_NUMBER previously, renamed because
# MULLE_BOARD_SERIAL_NUMBER is too long to type.
ifdef MULLE_SERIAL
  ifeq "200" "$(word 1, $(sort 200 $(MULLE_SERIAL)))"
    # >= 200
    ifneq "220" "$(word 1, $(sort 220 $(MULLE_SERIAL)))"
      # < 220
      CPU_MODEL = K60DN256ZVLL10
      # It seems some of the MK60DZ10 devices have problems with JTAG speeds >= around 400 KHz
      # when programming, we reduce the speed to 300 KHz with this command.
      CPU_OOCD_FLAGS += -c 'adapter_khz 300'
    else
      # >= 220
      CPU_MODEL = K60DN512VLL10
    endif
  endif
endif

### CPU part number (must have a specific linker script for each part)
# Note that MK60DN256ZVLL10 (version 1.x) and MK60DN256VLL10 (version 2.x, no Z)
# only differ in some register locations etc, not in the actual memory layout,
# so it is safe to use the same linker script for both version 1.x and version
# 2.x silicon.
# The linker script needs to know the flash and RAM sizes of the device.

ifeq ($(CPU_MODEL),)
  CPU_MODEL = K60DN512VLL10
endif

export CPU_MODEL

CONTIKI_TARGET_DIRS += . dev
CONTIKI_CORE=contiki-main
CONTIKI_TARGET_MAIN = ${CONTIKI_CORE}.o

CONTIKI_TARGET_SOURCEFILES += contiki-main.c \
  devicemap.c \
  udelay.c \
  spi-config.c \
  init-net.c \
  watchdog.c \
  slip_arch_uart.c \
  slip.c \
  sensors.c \
  leds-arch.c \
  leds.c \
  power-control.c \
  voltage.c \
  flash.c \
  xmem.c \
  cfs-coffee.c \
  lis3dh.c \
  lis3dh-arch.c \
  hih6130.c \
  radio-sensor.c \
  battery-sensor.c \
  button-sensor.c

include $(PLATFORM_DIR)/radio/rf212/Makefile.rf212

include $(CPU_DIR)/Makefile.$(CPU_NAME)
contiki-$(TARGET).a: ${addprefix $(OBJECTDIR)/,symbols.o}

# OpenOCD settings for Mulle board.
# Try to determine which version of the OpenOCD config file we should use.
# Specify PROGRAMMER_VERSION or PROGRAMMER_SERIAL to choose a specific programmer board.
ifeq ($(PROGRAMMER_VERSION),)
  ifneq ($(PROGRAMMER_SERIAL),)
    # Makefile-way of comparing numbers, using lexicographical sorting since we don't have any arithmetic comparisons.
    # Programmers with serial 100 -- 148 are version 0.60
    # Programmers with serial 301 -- 330 are version 0.70
    ifeq "100" "$(word 1, $(sort 100 $(PROGRAMMER_SERIAL)))"
      # >= 100
      ifneq "149" "$(word 1, $(sort 149 $(PROGRAMMER_SERIAL)))"
        # < 149
        PROGRAMMER_VERSION = 0.60
      else
        # >= 149
        PROGRAMMER_VERSION = 0.70
      endif
    endif
  endif
  # Default to version 0.60 programmer for now.
  PROGRAMMER_VERSION ?= 0.60
endif

OOCD_BOARD_FLAGS ?= -f '$(PLATFORM_DIR)/tools/openocd/mulle-programmer-$(PROGRAMMER_VERSION).conf'

# Host OS name
OS := $(shell uname)

ifeq ($(PORT),)
  # try to find tty name by serial number, only works on Linux currently.
  ifeq ($(OS),Linux)
    ifneq ($(PROGRAMMER_SERIAL),)
      PORT := $(shell $(PLATFORM_DIR)/tools/find-tty.sh '^$(PROGRAMMER_SERIAL)$$')
    else
      # find-tty.sh will return the first USB tty if no serial is given.
      PORT := $(shell $(PLATFORM_DIR)/tools/find-tty.sh)
    endif
  else ifeq ($(OS),Darwin)
    PORT := $(firstword $(wildcard /dev/tty.usbserial*))
  endif
endif

ifeq ($(PORT),)
  # fall back to a sensible default
  PORT := /dev/ttyUSB0
endif

# Add serial matching command
ifneq ($(PROGRAMMER_SERIAL),)
  OOCD_BOARD_FLAGS += -c 'ftdi_serial $(PROGRAMMER_SERIAL)'
endif


ifeq ($(FILENAME),)
FILENAME = $(CONTIKI_PROJECT).$(TARGET)
endif

FFLAGS ?= $(OOCD_BOARD_FLAGS)
FFLAGS += \
    -c 'tcl_port 0' \
    -c 'gdb_port 0' \
    -c 'telnet_port 0' \
    -c 'init' \
    -c 'targets' \
    -c 'reset halt' \
    -c 'flash write_image erase $(FILENAME) 0x00000000 elf' \
    -c 'reset halt' \
    -c 'load_image $(PLATFORM_DIR)/tools/wdog/wdog-disable.bin 0x20000000 bin' \
    -c 'resume 0x20000000' \
    -c 'verify_image $(FILENAME)' \
    -c 'reset run' \
    -c 'shutdown'

export FFLAGS

DEBUGSERVER_FLAGS ?= $(OOCD_BOARD_FLAGS)
DEBUGSERVER_FLAGS += \
    -c 'tcl_port 0' \
    -c 'gdb_port $(GDB_PORT)' \
    -c 'telnet_port 0' \
    -c 'init' \
    -c 'targets' \
    -c 'reset halt'

export DEBUGSERVER_FLAGS

RESET_FLAGS ?= $(OOCD_BOARD_FLAGS)
RESET_FLAGS += \
    -c 'tcl_port 0' \
    -c 'gdb_port 0' \
    -c 'telnet_port 0' \
    -c 'init' \
    -c 'reset run' \
    -c 'shutdown'

export RESET_FLAGS

DEBUGGER_FLAGS ?= -x $(PLATFORM_DIR)/tools/gdb.conf
DEBUGGER_FLAGS += \
    -ex 'tar ext :$(GDB_PORT)' \
    $(FILENAME)

export DEBUGGER_FLAGS

export TERMFLAGS += -b115200 "$(PORT)"

OPENOCD ?= openocd
export FLASHER ?= $(OPENOCD)
export DEBUGGER ?= $(GDB)
export DEBUGSERVER ?= $(OPENOCD)
export RESET ?= $(OPENOCD)
export TERMPROG ?= $(SERIALDUMP)

SERIALDUMP = $(CONTIKI)/tools/sky/serialdump-linux

login:
	$(SERIALDUMP) -b115200 $(PORT)

### Upload image
%.upload: %.u

%.u: %.$(TARGET)
	$(GDB) -x '$(PLATFORM_DIR)/tools/gdb.conf' -ex 'tar ext :$(GDB_PORT)' -ex 'load' -ex 'mon reset halt' $<

# By default, upload the file with the same name as the project.
upload: $(CONTIKI_PROJECT).u

flash: $(FILENAME)
	$(FLASHER) $(FFLAGS)

term:
	$(TERMPROG) $(TERMFLAGS)

debug: $(FILENAME)
	$(DEBUGGER) $(DEBUGGER_FLAGS)

debug-server:
	$(DEBUGSERVER) $(DEBUGSERVER_FLAGS)

reset:
	$(RESET) $(RESET_FLAGS)

MODULES += \
  core/net \
  core/net/mac \
  core/net/mac/contikimac \
  core/net/mac/cxmac \
  core/net/llsec
