.SUFFIXES:

### Code common for all ARM CPUs

CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm
CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/k60

### Define the source files

CONTIKI_CPU_DIRS = . drivers

CONTIKI_TARGET_SOURCEFILES += \
  synchronization.c \
  basevectors.c \
  devio-null.c \
  devio-uart.c \
  port.c \
  uart.c \
  rtc.c \
  spi.c \
  rtimer-arch.c \
  dbg-uart.c \
  clock.c \
  llwu.c \
  power-modes.c \
  onewire.c \
  fault-handlers.c \
  ds18b20.c \
  system_MK60D10.c


CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

PERIPH_SOURCEFILES += \
  adc.c \
  dac.c \
  dma.c \
  gpio.c \
  i2c.c \
  pdb.c \
  pwm.c \
  timer.c \
  #

### Compiler definitions

# Target triple for the build. Use arm-none-eabi if you are unsure.
export TARGET_TRIPLE ?= arm-none-eabi

MCPU = cortex-m4

# Use TOOLCHAIN environment variable to select the toolchain to use.
# Default: gnu
TOOLCHAIN ?= gnu

# TOOLCHAIN = clang is an alias for TOOLCHAIN = llvm
ifeq (clang,$(TOOLCHAIN))
# use override so that we can redefine a variable set on the command line (as
# opposed to one set in the environment)
override TOOLCHAIN := llvm
endif
# TOOLCHAIN = gcc is an alias for TOOLCHAIN = gnu
ifeq (gcc,$(TOOLCHAIN))
# use override so that we can redefine a variable set on the command line (as
# opposed to one set in the environment)
override TOOLCHAIN := gnu
endif

ifeq (,$(TOOLCHAIN))
override TOOLCHAIN := gnu
endif

export TOOLCHAIN

# Toolchain prefix, composed of the path and target triple, you will most likely not need to touch this.
TCPREFIX  ?= $(if $(GCCBIN),$(GCCBIN)/)$(if $(TARGET_TRIPLE),$(TARGET_TRIPLE)-)
GDBPREFIX ?= $(TCPREFIX)

# define build specific options
export CFLAGS_CPU    = -mcpu=$(MCPU) -mlittle-endian -mthumb $(CFLAGS_FPU)
ifneq (llvm,$(TOOLCHAIN))
# Clang (observed with v3.7) does not understand  -mno-thumb-interwork, only add if
# not building with LLVM
export CFLAGS_CPU   += -mno-thumb-interwork
endif
export CFLAGS_STYLE  = -Wall -Wstrict-prototypes -Werror=implicit-function-declaration
export CFLAGS_STYLE += -fno-common
export CFLAGS_STYLE += -std=gnu99
# Remove when/if Contiki uIP is fixed wrt strict aliasing rules
export CFLAGS_STYLE += -fno-strict-aliasing
export CFLAGS_LINK   = -ffunction-sections -fdata-sections -fno-builtin -fshort-enums
export CFLAGS_DBG    = -ggdb -g3
export CFLAGS_OPT   ?= -Os

export CFLAGS += $(CFLAGS_CPU) $(CFLAGS_STYLE) $(CFLAGS_LINK) $(CFLAGS_DBG) $(CFLAGS_OPT)

export ASFLAGS += $(CFLAGS_CPU) $(CFLAGS_DBG)
export LDFLAGS += -L$(CONTIKI_CPU)/ldscripts
export LDFLAGS += -T$(CONTIKI_CPU)/ldscripts/$(CPU_MODEL).ld -Wl,--fatal-warnings
export LDFLAGS += $(CFLAGS_DBG) $(CFLAGS_CPU) $(CFLAGS_STYLE) $(CFLAGS_OPT) -static -lgcc -nostartfiles
export LDFLAGS += -Wl,--gc-sections
export LDFLAGS += -Wl,-Map=$@.map -Wl,--cref

# CMSIS DSP needs to know about the CPU core
export CFLAGS += -DARM_MATH_CM4

# Import all toolchain settings
include $(CONTIKI_CPU)/Makefile.include.$(TOOLCHAIN)

export CFLAGS += $(INCLUDES)
export CXXFLAGS += $(CXXINCLUDES)

# use the nano-specs of Newlib when available
ifeq ($(shell $(LD) -specs=nano.specs -E - 2>/dev/null >/dev/null </dev/null ; echo $$?),0)
  export LDFLAGS += -specs=nano.specs -lc -lnosys -u _printf_float
endif

# llvm-ar does not support the f modifier (anymore, since r186078) set in the
# default Contiki Makefile.include
AROPTS   = rcs

LINKERSCRIPTPATH = $(CONTIKI_CPU)/ldscripts
LINKERSCRIPT = $(CPU_PART).ld
#AROPTS   = rv
#CFLAGS   += $(CFLAGSNO)  $(DEBUG) -O$(OPTI) $(OPTFLAGS) -Wall -Werror=implicit-function-declaration -fno-common -fno-strict-aliasing -mcpu=cortex-m4 -mthumb -ffunction-sections -fdata-sections -fshort-enums -fsigned-char $(NEWLIB_INCLUDES)
#LDFLAGS  += $(CFLAGS) -nostartfiles -Wl,-L$(LINKERSCRIPTPATH) -T $(LINKERSCRIPT) -Wl,-Map=$@.map -Wl,--gc-sections
CFLAGS += -I. -I$(CONTIKI)/core \
          -I$(CONTIKI_CPU)/include \
          -I$(CONTIKI_CPU_ARM_COMMON)/CMSIS \
          -I$(CONTIKI)/platform/$(TARGET)/include \
          ${addprefix -I,$(APPDIRS)} \
          -DWITH_ASCII

LD_START_GROUP ?= -Wl,--start-group
LD_END_GROUP ?= -Wl,--end-group

### Setup directory search path for source files

#CONTIKI_TARGET_DIRS_CONCAT = ${addprefix $(CONTIKI)/platform/$(TARGET)/, \
#                               $(CONTIKI_TARGET_DIRS)}
#
#vpath %.c $(PROJECTDIRS) $(CONTIKI_CPU) \
#	  $(CONTIKIDIRS) $(APPDIRS) $(CONTIKI_TARGET_DIRS_CONCAT)

# Some object files need to be included directly in the link (without being
# placed in a static library) in order to not get garbage collected too soon,
# or replaced by generic stuff (in e.g. newlib).
# 2014-10-04: Added ssp.c in order to be able to link with a libc built with
#             -fstack-protector, but Contiki built without the flag which leads
#             to link errors about undefined reference to `__stack_chk_guard'
#             and `__stack_chk_fail'
CPU_STARTC = \
  startup-k60.c \
  interrupt-vector-k60.c \
  newlib-syscalls.c \
  ssp.c

CPU_STARTOBJ=${addprefix $(OBJECTDIR)/,$(CPU_STARTC:.c=.o)}

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

PERIPH_OBJECTFILES += $(addprefix $(OBJECTDIR)/,$(addprefix periph/, $(PERIPH_SOURCEFILES:.c=.o)))

### Compilation rules
all:

%-stripped.o: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

# Build the periph drivers as a separate library for easier relinking
periph-$(TARGET).a: $(PERIPH_OBJECTFILES)
	$(TRACE_AR)
	$(Q)$(AR) $(AROPTS) $@ $^

CLEAN += periph-$(TARGET).a

$(PERIPH_OBJECTFILES): | $(OBJECTDIR)/periph

ifneq ($(MAKECMDGOALS),clean)
-include $(addprefix $(OBJECTDIR)/,$(PERIPH_SOURCEFILES:.c=.d))
endif

$(OBJECTDIR)/periph:
	mkdir -p $@

# Link the final binary and display the size
CUSTOM_RULE_LINK = 1
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) periph-$(TARGET).a contiki-$(TARGET).a $(CPU_STARTOBJ)
	$(TRACE_LD)
	$(Q)$(LD) $(TARGET_STARTFILES) $(LD_START_GROUP) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) $(LD_END_GROUP) $(LDFLAGS) -o $@
	-@$(SIZE) -B -d $@ 2>/dev/null

#.SECONDARY:

symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h
